# StcBgpDevice() - spirent/stc_bgp_device.py
our_version = 104
from copy import deepcopy
from ask.common.task import Task
'''
*******************************************
StcBgpDevice() - spirent/stc_bgp_device.py
*******************************************

.. contents::
   :local:
   :depth: 1

ScriptKit Synopsis
------------------
StcBgpDevice() generates Ansible task instances conformant with Spirent's
Ansible implementation for their LabServer + TestCenter products.
These task instances can then be passed to Playbook().add_task()

Ansible Module Documentation
----------------------------

    - `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_

Prerequisites
-------------

    1.  To run the playbook generated by StcBgpDevice(),
        `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_ 
        and its dependencies (e.g. paramiko) must be installed.

ScriptKit Example
-----------------

    - `unit_test/spirent/unit_test_stc_bgp_device.py <https://github.com/allenrobel/ask/blob/main/unit_test/spirent/unit_test_stc_bgp_device.py>`_

Properties
----------

====================================    ==================================================
Property                                Description
====================================    ==================================================
action                                  Create or delete the BGP emulated device::

                                            - Type: str()
                                            - Spirent name: action
                                            - Valid values: create, delete
                                            - Examples:
                                                - task.action = 'create'

asn                                     Autonomous System Number of emulated BGP Device::

                                            - Type: int()
                                            - Spirent name: AsNum
                                            - Examples:
                                                - task.asn = 65000

count                                   Increments a counter which can be accessed with
                                        variable ${item} within a playbook.  ScriptKit
                                        does not use this and setting it to anything
                                        other than 1 hasn't been tested.  You're on your
                                        own...::

                                            - Type: int()
                                            - Spirent name: count
                                            - Examples:
                                                - task.count = 1

dut_asn                                 Autonomous System Number of device under test::

                                            - Type: int()
                                            - Spirent name: DutAsNum
                                            - Examples:
                                                - task.asn = 65000

ip_version                              IP version used by BGP peering session::

                                            - Type: str()
                                            - Spirent name: IpVersion
                                            - Valid values: IPV4, IPV6
                                            - Examples:
                                                - task.ip_version = 'IPV4'

name                                    Name of BGP emulated device. This can later be
                                        referenced to modify/delete the device.::

                                            - Type: str()
                                            - Spirent name: name
                                            - Examples:
                                                - task.name = 'bgp_device_1'

under                                   Name of the emulated device under which to create
                                        the BGP emulated device.::

                                            - Type: str()
                                            - Spirent name: under
                                            - Examples:
                                                - task.under = 'device_1'

====================================    ==================================================
'''
class StcBgpDevice(Task):
    def __init__(self, task_log):
        ansible_module = 'stc'
        super().__init__(ansible_module, task_log)
        self.lib_version = our_version
        self.class_name = __class__.__name__
        self.ansible_task = dict()
        self.ansible_task[self.ansible_module] = dict()
        self.ansible_task[self.ansible_module]['objects'] = list()
        self.ansible_task[self.ansible_module]['action'] = None

        self.properties_set = set()
        self.properties_set.add('asn')
        self.properties_set.add('dut_asn')
        self.properties_set.add('ip_version')
        self.properties_set.add('name')
        self.properties_set.add('action')
        self.properties_set.add('count')
        self.properties_set.add('under')

        self.bgp_router_config_set = set()
        self.bgp_router_config_set.add('asn')
        self.bgp_router_config_set.add('dut_asn')
        self.bgp_router_config_set.add('ip_version')
        self.bgp_router_config_set.add('name')

        self.stc_set = set()
        self.stc_set.add('action')
        self.stc_set.add('count')
        self.stc_set.add('under')

        # scriptkit_properties can be used by scripts when
        # setting task_name. See Task().append_to_task_name()
        self.scriptkit_properties = set()
        self.scriptkit_properties.update(self.properties_set)
        self.scriptkit_properties.update(self.bgp_router_config_set)
        self.scriptkit_properties.update(self.stc_set)

        # used in self.update() to map between this class's property names
        # and Spirent's property names. This dict() is keyed on the items in
        # self.bgp_router_config_set, and MUST contain all of these items.
        self.property_map = dict()
        self.property_map['asn'] = 'AsNum'
        self.property_map['dut_asn'] = 'DutAsNum'
        self.property_map['ip_version'] = 'IpVersion'
        self.property_map['name'] = 'name'

        self.stc_bgp_device_valid_action = set()
        self.stc_bgp_device_valid_action.add('create')
        self.stc_bgp_device_valid_action.add('delete')

        self.stc_bgp_device_valid_ip_version = set()
        self.stc_bgp_device_valid_ip_version.add('IPV4')
        self.stc_bgp_device_valid_ip_version.add('IPV6')

        self.init_properties()

    def init_properties(self):
        self.properties = dict()
        for p in self.properties_set:
            self.properties[p] = None

    def verify_stc_bgp_device_action(self, x, parameter='action'):
        verify_set = self.stc_bgp_device_valid_action
        if x not in verify_set:
            source_method = 'verify_stc_bgp_device_action'
            expectation = '{}'.format(', '.join(verify_set))
            self.fail(self.class_name, source_method, x, parameter, expectation)

    def verify_stc_bgp_device_ip_version(self, x, parameter='ip_version'):
        verify_set = self.stc_bgp_device_valid_ip_version
        if x not in verify_set:
            source_method = 'verify_stc_bgp_device_ip_version'
            expectation = '{}'.format(', '.join(verify_set))
            self.fail(self.class_name, source_method, x, parameter, expectation)

    def final_verification(self):
        for p in self.bgp_router_config_set:
            if self.properties[p] == None:
                self.task_log.error('exiting. call instance.{} before calling instance.update()'.format(p))
                exit(1)
        for p in self.stc_set:
            if self.properties[p] == None:
                self.task_log.error('exiting. call instance.{} before calling instance.update()'.format(p))
                exit(1)

    def update(self):
        '''
        call final_verification()
        populate ansible_task dict()
        '''
        self.final_verification()

        d = dict()
        d['BgpRouterConfig'] = dict()
        for p in self.bgp_router_config_set:
            if p not in self.property_map:
                self.task_log.error('exiting. Please contact info@scriptkit.org about this error.')
                exit(1)
            mapped_p = self.property_map[p]
            d['BgpRouterConfig'][mapped_p] = self.properties[p]

        self.ansible_task[self.ansible_module]['action'] = self.action
        self.ansible_task[self.ansible_module]['count'] = self.count
        self.ansible_task[self.ansible_module]['under'] = self.under
        self.ansible_task[self.ansible_module]['objects'].append(deepcopy(d))
        if self.task_name != None:
            self.ansible_task['name'] = self.task_name

    #-----------------------------------------------------------------
    # bgp_router_config properties
    #-----------------------------------------------------------------

    @property
    def asn(self):
        return self.properties['asn']
    @asn.setter
    def asn(self, x):
        parameter = 'asn'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    @property
    def dut_asn(self):
        return self.properties['dut_asn']
    @dut_asn.setter
    def dut_asn(self, x):
        parameter = 'dut_asn'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    @property
    def ip_version(self):
        return self.properties['ip_version']
    @ip_version.setter
    def ip_version(self, x):
        parameter = 'ip_version'
        if self.set_none(x, parameter):
            return
        self.verify_stc_bgp_device_ip_version(x, parameter)
        self.properties[parameter] = x

    @property
    def name(self):
        return self.properties['name']
    @name.setter
    def name(self, x):
        parameter = 'name'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    #-----------------------------------------------------------------
    # top_level properties
    #-----------------------------------------------------------------

    @property
    def action(self):
        return self.properties['action']
    @action.setter
    def action(self, x):
        parameter = 'action'
        if self.set_none(x, parameter):
            return
        self.verify_stc_bgp_device_action(x, parameter)
        self.properties[parameter] = x

    @property
    def count(self):
        return self.properties['count']
    @count.setter
    def count(self, x):
        parameter = 'count'
        if self.set_none(x, parameter):
            return
        if not self.is_digits(x):
            expectation = 'digits'
            self.fail(self.class_name, parameter, x, parameter, expectation)
        self.properties[parameter] = x

    @property
    def under(self):
        return self.properties['under']
    @under.setter
    def under(self, x):
        parameter = 'under'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x
