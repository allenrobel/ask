# StcPortControl() - spirent/stc_port_control.py
our_version = 104
from copy import deepcopy
from ask.common.task import Task
'''
***********************************************
StcPortControl() - spirent/stc_port_control.py
***********************************************

.. contents::
   :local:
   :depth: 1

ScriptKit Synopsis
------------------
StcPortControl() provides commands to attach to, and detach from, Spirent
ports.

StcPortControl() generates Ansible task instances conformant with Spirent's
Ansible implementation for their LabServer + TestCenter products.
These task instances can then be passed to Playbook().add_task()

Ansible Module Documentation
----------------------------

    - `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_

Prerequisites
-------------

    1.  To run the playbook generated by StcPortControl(),
        `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_ 
        and its dependencies (e.g. paramiko) must be installed.

ScriptKit Example
-----------------

    - `unit_test/spirent/unit_test_stc_port_control.py <https://github.com/allenrobel/ask/blob/main/unit_test/spirent/unit_test_stc_port_control.py>`_

NOTES
-----

    1. If no ports are specified (see add_port_by_*() methods below), then command
       (attach or detach) will be executed for ALL ports.

Properties
----------

====================================    ==================================================
Property / Method                       Description
====================================    ==================================================
add_port_by_standard_name()             This adds a port, by port name, using 
                                        ScriptKit-assigned names in Chassis/Module/Port
                                        format, e.g. Stc1/1/5.  As such, this method
                                        requires that the chassis, module, and port
                                        properties are called first.::

                                            Example:

                                            chassis = 1
                                            module = 1
                                            for port in [1, 5]:
                                                task.chassis = chassis
                                                task.module = module
                                                task.port = port
                                                task.add_port_by_standard_name()

add_port_by_custom_name()               This adds a port, by port name, using custom
                                        user-assigned names.::

                                            Example:

                                            port_names = ['MyPort1', 'MyPort2']
                                            for name in port_names:
                                                task.add_port_by_custom_name(name)

auto_connect                            Automatically connect to the ports in port_list::

                                            - Type: bool()
                                            - Spirent name: AutoConnect
                                            - Valid values: False, True
                                            - Default: True
                                            - Examples:
                                                - task.auto_connect = False

chassis                                 Chassis number, starting with 1.  For
                                        single-chassis, use 1.::

                                            - Type: int()
                                            - Spirent name: location
                                            - Examples:
                                                - task.chassis = 1
                                            - Required

module                                  Module number::

                                            - Type: int()
                                            - Spirent name: location
                                            - Examples:
                                                - task.module = 2
                                            - Required

port                                    Port number::

                                            - Type: int()
                                            - Spirent name: location
                                            - Examples:
                                                - task.port = 1
                                            - Required

command                                 Attach to, or detach from the ports in port_list::

                                            - Type: str()
                                            - Spirent name: command
                                            - Valid values: attach, detach
                                            - Examples:
                                                - task.command = 'attach'
                                            - Required

revoke_owner                            Forcefully reserve all ports in port_list. If the 
                                        port(s) are reserved by another user, force a 
                                        change in ownership.  This will disrupt whatever
                                        the other user may be doing with the port(s)::

                                            - Type: bool()
                                            - Spirent name: RevokeOwner
                                            - Valid values: False, True
                                            - Default: False
                                            - Examples:
                                                - task.revoke_owner = True

====================================    ==================================================

'''
class StcPortControl(Task):
    def __init__(self, task_log):
        ansible_module = 'stc'
        super().__init__(ansible_module, task_log)
        self.lib_version = our_version
        self.class_name = __class__.__name__

        self.action = 'perform'

        self.port_list = list() # Updated in self.add_port*()

        self.properties_set = set()
        self.properties_set.add('auto_connect')
        self.properties_set.add('command')
        self.properties_set.add('revoke_owner')

        self.port_properties_set = set()
        self.port_properties_set.add('chassis')
        self.port_properties_set.add('module')
        self.port_properties_set.add('port')

        # scriptkit_properties can be used by scripts when
        # setting task_name. See Task().append_to_task_name()
        self.scriptkit_properties = set()
        self.scriptkit_properties.update(self.properties_set)
        self.scriptkit_properties.update(self.port_properties_set)

        # used in self.update() to map between this class's property names
        # and Spirent's property names. This dict() is keyed on the items in
        # self.properties_set, and MUST contain all of these items.
        # property_map MAY contain other items in addition to those in
        # properties_set
        self.property_map = dict()
        self.property_map['auto_connect']   = 'AutoConnect'
        self.property_map['command']        = 'command'
        self.property_map['revoke_owner']   = 'RevokeOwner'

        self.stc_port_control_valid_command = set()
        self.stc_port_control_valid_command.add('attach')
        self.stc_port_control_valid_command.add('detach')
                
        self.properties = dict()
        self.port_properties = dict()

        self.init_properties()

    def init_properties(self):
        for p in self.properties_set:
            self.properties[p] = None
    def init_port_properties(self):
        for p in self.port_properties_set:
            self.properties[p] = None

    def final_verification(self):
        if self.command == None:
            self.task_log.error('exiting. Call instance.command before calling instance.update()')
            self.task_log.error('instance.command valid values: '.format(','.join(self.stc_port_control_valid_command)))
            exit(1)
        if self.auto_connect == None:
            self.auto_connect = True
        if self.revoke_owner == None:
            self.revoke_owner = False

    def update(self):
        '''
        Call self.final_verification()
        Populate self.ansible_task dict() which is required by Playbook()
        '''
        self.final_verification()
        d = dict()
        d['action'] = self.action
        if self.command == 'attach':
            d['command'] = 'AttachPorts'
        else:
            d['command'] = 'DetachPortsCommand'
        d['properties'] = dict()
        for p in self.properties_set:
            if self.properties[p] != None:
                mapped_property = self.property_map[p]
                d['properties'][mapped_property] = self.properties[p]
        # The Spirent PortList property requires either:
        #     ref:/port
        #
        #     or a space-separated list of port handles:
        #
        #     port1 port2 port3
        #
        # The latter is obtained using get and return via a register,
        # like this:
        #
        #    -   stc:
        #           action: get
        #           objects: ref:/port
        #        register: result
        #
        #    - debug:
        #         var: result
        #
        # This won't work with Ansible since we have to process a large JSON
        # file (returned above as var result) to figure out what port1 refers
        # to e.g. Location: //1/3/2, or Name: MyPort1
        #
        # Instead, we can use a list of port names (port names are created
        # with StcPorts() in stc_ports.py) and use the Spirent Name
        # property, which will accept a list of port names.
        #
        # d['properties']['Name'] = ['Stc1/1/1', 'Stc1/1/5']
        # 
        # Resulting in:
        #
        # tasks:
        # -   name: attach ports custom
        #     stc:
        #         action: perform
        #         command: AttachPorts
        #         properties:
        #             AutoConnect: true
        #             Name: 
        #                - Stc1/1/1
        #                - Stc1/1/5
        #             RevokeOwner: true
        #             command: attach

        if len(self.port_list) == 0:
            # If the user hasn't added a port, use the PortList property
            # to select ALL ports
            d['properties']['PortList'] = 'ref:/port'
        else:
            # Use the Name property
            d['properties']['Name'] = self.port_list
        self.ansible_task = dict()
        if self.task_name != None:
            self.ansible_task['name'] = self.task_name
        self.ansible_task[self.ansible_module] = deepcopy(d)

    def port_verification(self):
        if self.chassis == None:
            self.task_log.error('exiting. call instance.chassis before calling instance.add_port()')
            exit(1)
        if self.module == None:
            self.task_log.error('exiting. call instance.module before calling instance.add_port()')
            exit(1)
        if self.port == None:
            self.task_log.error('exiting. call instance.port before calling instance.add_port()')
            exit(1)

    def add_port_by_location(self):
        '''
        TODO: Not used.  Need to test if this is even posssible.  Perhaps
        by passing a list() to the Spirent Location property.
        '''
        self.port_verification()
        port = '//{}/{}/{}'.format(self.chassis, self.module, self.port)
        self.port_list.append(port)
        self.init_port_properties()

    def add_port_by_standard_name(self):
        # TODO: Create a method in common.py that returns a standard
        # ScriptKit Spirent port name, since we'll use this in multiple other
        # libraries.
        self.port_verification()
        name = 'Stc{}/{}/{}'.format(self.chassis, self.module, self.port)
        self.port_list.append(name)
        self.init_port_properties()

    def add_port_by_custom_name(self, name):
        self.port_list.append(name)

    def verify_stc_port_control_auto_connect(self, x, parameter='auto_connect'):
        if self.is_boolean(x):
            return
        source_method = 'verify_stc_port_control_auto_connect'
        expectation = 'bool() True or False'
        self.fail(self.class_name, source_method, x, parameter, expectation)

    def verify_stc_port_control_command(self, x, parameter='command'):
        verify_set = self.stc_port_control_valid_command
        if x in verify_set:
            return
        source_method = 'verify_stc_port_control_command'
        expectation = ','.join(verify_set)
        self.fail(self.class_name, source_method, x, parameter, expectation)

    def verify_stc_port_control_revoke_owner(self, x, parameter='revoke_owner'):
        if self.is_boolean(x):
            return
        source_method = 'verify_stc_port_control_revoke_owner'
        expectation = 'bool() True or False'
        self.fail(self.class_name, source_method, x, parameter, expectation)

    @property
    def auto_connect(self):
        return self.properties['auto_connect']
    @auto_connect.setter
    def auto_connect(self, x):
        parameter = 'auto_connect'
        if self.set_none(x, parameter):
            return
        self.verify_stc_port_control_auto_connect(x, parameter)
        self.properties[parameter] = x

    @property
    def command(self):
        return self.properties['command']
    @command.setter
    def command(self, x):
        parameter = 'command'
        if self.set_none(x, parameter):
            return
        self.verify_stc_port_control_command(x, parameter)
        self.properties[parameter] = x

    @property
    def chassis(self):
        return self.properties['chassis']
    @chassis.setter
    def chassis(self, x):
        parameter = 'chassis'
        if self.set_none(x, parameter):
            return
        self.verify_digits(x, parameter)
        self.properties[parameter] = str(x)

    @property
    def module(self):
        return self.properties['module']
    @module.setter
    def module(self, x):
        parameter = 'module'
        if self.set_none(x, parameter):
            return
        self.verify_digits(x, parameter)
        self.properties[parameter] = str(x)

    @property
    def port(self):
        return self.properties['port']
    @port.setter
    def port(self, x):
        parameter = 'port'
        if self.set_none(x, parameter):
            return
        self.verify_digits(x, parameter)
        self.properties[parameter] = str(x)

    @property
    def revoke_owner(self):
        return self.properties['revoke_owner']
    @revoke_owner.setter
    def revoke_owner(self, x):
        parameter = 'revoke_owner'
        if self.set_none(x, parameter):
            return
        self.verify_stc_port_control_revoke_owner(x, parameter)
        self.properties[parameter] = x
