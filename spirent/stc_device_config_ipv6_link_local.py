# StcDeviceConfigIpv6LinkLocal() - spirent/stc_device_config_ipv6_link_local.py
our_version = 104
from copy import deepcopy
from ask.common.task import Task
'''
*****************************************************************************
StcDeviceConfigIpv6LinkLocal() - spirent/stc_device_config_ipv6_link_local.py
*****************************************************************************

.. contents::
   :local:
   :depth: 1

ScriptKit Synopsis
------------------
StcDeviceConfigIpv6LinkLocal() generates Ansible task instances conformant with Spirent's
Ansible implementation for their LabServer + TestCenter products.
These task instances can then be passed to Playbook().add_task()

Ansible Module Documentation
----------------------------

    - `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_

Prerequisites
-------------

    1.  To run the playbook generated by StcDeviceConfigIpv6LinkLocal(),
        `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_ 
        and its dependencies (e.g. paramiko) must be installed.

ScriptKit Example
-----------------

    - `unit_test/spirent/unit_test_stc_device_config_ipv6_link_local.py <https://github.com/allenrobel/ask/blob/main/unit_test/spirent/unit_test_stc_device_config_ipv6_link_local.py>`_

Properties
----------

====================================    ==================================================
Property                                Description
====================================    ==================================================
device_name                             Emulated device name under which to configure ipv6
                                        link local. This is used to populate the Spirent
                                        'under' parameter with a Spirent ref which points 
                                        to the emulated device.::

                                            - Type: str()
                                            - Spirent name: none
                                            - Examples:
                                                - task.device_name = '611_ipv6'
                                            - Required

                                            The above populates the following required Spirent 
                                            parameter:

                                                under: /Emulateddevice[@Name="ipv6_device"]

link_local_address                      ipv6 link-local address::

                                            - Type: str()
                                            - Spirent name: Address
                                            - Default: 'fe80::1'
                                            - Examples:
                                                - task.link_local_address = 'fe80::1'

link_local_gateway                      Gateway used by link-local. Generally, this will be the
                                        host address portion of link_local_address::

                                            - Type: str()
                                            - Spirent name: Gateway
                                            - Default: '::1'
                                            - Examples:
                                                - task.link_local_gateway = '::1'

====================================    ==================================================

'''
class StcDeviceConfigIpv6LinkLocal(Task):
    def __init__(self, task_log):
        ansible_module = 'stc'
        super().__init__(ansible_module, task_log)
        self.lib_version = our_version
        self.class_name = __class__.__name__

        self.action = 'config'
        self.count = 1
        # If there are any use cases where a user would have to 
        # set link_local_prefixlen, we can change this to a user
        # accessible property.  For now, we hardcode it so the
        # user doesn't have to think about it.
        self.link_local_prefixlen = 128

        self.objects = list() # appended to in add_object()

        self.properties_set = set()
        self.properties_set.add('link_local_address')
        self.properties_set.add('link_local_gateway')

        # used in self.update() to map between this class's property names
        # and Spirent's property names. This dict() is keyed on the items in
        # self.properties_set, and MUST contain all of these items.
        self.property_map = dict()
        self.property_map['link_local_address'] = 'Address'
        self.property_map['link_local_gateway'] = 'Gateway'

        self.init_properties()

    def init_properties(self):
        self.properties = dict()
        for p in self.properties_set:
            self.properties[p] = None
        self.properties['device_name'] = None

    def add_object(self):
        d = dict()
        d['Ipv6If'] = dict()
        for p in self.properties_set:
            mapped_p = self.property_map[p]
            d['Ipv6If'][mapped_p] = self.properties[p]
        d['Ipv6If']['PrefixLength'] = self.link_local_prefixlen

        d['Ipv6If']['name'] = self.get_device_name_link_local()
        d['Ipv6If']['stackedon'] = 'ref:../ethiiif'
        d['Ipv6If']['toplevelif-sources'] = 'ref:../'
        d['Ipv6If']['PrimaryIf-sources'] = 'ref:../'
        self.objects.append(deepcopy(d))

    def final_verification(self):
        if self.device_name == None:
            self.task_log.error('exiting. call instance.device_name before calling instance.update()')
            exit(1)
        if self.link_local_address == None:
            self.link_local_address = 'fe80::1'
        if self.link_local_gateway == None:
            self.link_local_gateway = '::1'

    def update(self):
        '''
        call final_verification()
        populate ansible_task dict()
        '''
        self.final_verification()
        self.ansible_task = dict()
        if self.task_name != None:
            self.ansible_task['name'] = self.task_name
        self.ansible_task[self.ansible_module] = dict()
        self.ansible_task[self.ansible_module]['action'] = self.action
        self.ansible_task[self.ansible_module]['count'] = self.count
        self.ansible_task[self.ansible_module]['under'] = self.get_device_ref()
        self.add_object()
        self.ansible_task[self.ansible_module]['objects'] = self.objects

    def get_device_name_link_local(self):
        return '{}_linklocal'.format(self.device_name)

    def get_device_ref(self):
        return '/Emulateddevice[@Name="{}"]'.format(self.device_name)

    @property
    def device_name(self):
        return self.properties['device_name']
    @device_name.setter
    def device_name(self, x):
        parameter = 'device_name'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    @property
    def link_local_address(self):
        return self.properties['link_local_address']
    @link_local_address.setter
    def link_local_address(self, x):
        parameter = 'link_local_address'
        # TODO add a verification
        self.properties[parameter] = x

    @property
    def link_local_gateway(self):
        return self.properties['link_local_gateway']
    @link_local_gateway.setter
    def link_local_gateway(self, x):
        parameter = 'link_local_gateway'
        # TODO add a verification
        self.properties[parameter] = x
