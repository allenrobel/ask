# StcTrafficControl() - spirent/stc_traffic_control.py
our_version = 103
from copy import deepcopy
from ask.common.task import Task
'''
*********************
StcTrafficControl()
*********************

.. contents::
   :local:
   :depth: 1

ScriptKit Synopsis
------------------
StcTrafficControl() facilitates generation of Ansible playbooks to
start and stop Spirent traffic generators.

StcTrafficControl() generate Ansible task instances conformant with
Spirent's Ansible implementation for their LabServer + TestCenter
products.  These task instances can then be passed to
Playbook().add_task()

Caveats
-------

Ansible Module Documentation
----------------------------

- `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_

Prerequisites
-------------

1.  To run playbooks generated by StcTrafficControl()
    `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_ 
    and its dependencies (e.g. paramiko) must be installed.

ScriptKit Example
-----------------

- `unit_test/spirent/unit_test_stc_traffic_control.py <https://github.com/allenrobel/ask/blob/main/unit_test/spirent/unit_test_stc_traffic_control.py>`_

====================    ==================================================
Property                Description
====================    ==================================================
command                 Start or stop traffic generator::

                            - Type: str()
                            - Spirent name: command
                            - Valid values:
                                - start
                                - stop
                            - Example:
                                task.command = 'start'

generator_list          A Spirent reference to a set of generators to
                        start/stop. Default is to start or stop all
                        generators::

                            - Type: str()
                            - Default:
                                - ref:/project
                            - Example:
                                task.generator_list = 'ref:/project'

====================    ==================================================

Authors
~~~~~~~

- Allen Robel (@PacketCalc)

'''
class StcTrafficControl(Task):
    def __init__(self, log):
        ansible_module = 'stc'
        super().__init__(ansible_module, log)
        self.lib_version = our_version
        self.class_name = __class__.__name__

        self.action = 'perform'

        # Used in init_properties() to initialize all user-accessible properties
        self.properties_set = set()
        self.properties_set.add('command')
        self.properties_set.add('generator_list')

        # Used in update() to populate properties key
        self.stc_properties_set = set()
        self.stc_properties_set.add('generator_list')

        # scriptkit_properties can be used by scripts when
        # setting task_name. See Task().append_to_task_name()
        self.scriptkit_properties = set()
        self.scriptkit_properties.update(self.properties_set)

        # used in self.update() to map between this class's property names
        # and Spirent's property names. This dict() is keyed on the items in
        # self.stc_properties_set, and MUST contain all of these items.
        self.property_map = dict()
        self.property_map['generator_list'] = 'GeneratorList'

        self.stc_traffic_control_valid_command = set()
        self.stc_traffic_control_valid_command.add('start')
        self.stc_traffic_control_valid_command.add('stop')

        self.init_properties()

    def init_properties(self):
        self.properties = dict()
        for p in self.properties_set:
            self.properties[p] = None

    def verify_stc_traffic_control_command(self, x, parameter='command'):
        verify_set = self.stc_traffic_control_valid_command
        if x in verify_set:
            return
        expectation = '{}'.format(', '.join(verify_set))
        source_class = self.class_name
        source_method = 'verify_stc_traffic_control_command'
        self.fail(source_class, source_method, x, parameter, expectation)

    def final_verification(self):
        if self.generator_list == None:
            self.generator_list = 'ref:/project'
        if self.command == None:
            self.task_log.error('exiting. Call instance.command before calling instance.commit()')
            self.task_log.error('Valid values for instance.command: {}'.format(','.join(self.stc_traffic_control_valid_command)))
            exit(1)

    def commit(self):
        self.update()
    def update(self):
        '''
        Call self.final_verification()
        Populate self.ansible_task dict()
        '''
        self.final_verification()
        if self.command == 'start':
            command = 'GeneratorStart'
        else:
            command = 'GeneratorStop'

        d = dict()
        d['action'] = self.action
        d['command'] = command
        d['properties'] = dict()
        for p in self.stc_properties_set:
            stc_property_name = self.property_map[p]
            d['properties'][stc_property_name] = self.properties[p]

        self.ansible_task = dict()
        if self.task_name != None:
            self.ansible_task['name'] = self.task_name
        self.ansible_task[self.ansible_module] = deepcopy(d)

    @property
    def command(self):
        return self.properties['command']
    @command.setter
    def command(self, x):
        parameter = 'command'
        if self.set_none(x, parameter):
            return
        self.verify_stc_traffic_control_command(x, parameter)
        self.properties['command'] = x

    @property
    def generator_list(self):
        return self.properties['generator_list']
    @generator_list.setter
    def generator_list(self, x):
        parameter = 'generator_list'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x
