# StcDrvSave() - spirent/stc_drv_save.py
our_version = 103
from copy import deepcopy
from ask.common.task import Task
'''
**************************************************
StcDrvSave() - spirent/stc_drv_save.py
**************************************************

.. contents::
   :local:
   :depth: 1

ScriptKit Synopsis
------------------
StcDrvSave() generates an Ansible task that saves results from a
named Dynamic Result View (DRV) that were previously retrieved
into an Ansible register by a Ansible task generated with 
StcDrvFetch() (or an equivilent Ansible task).

It generates Ansible task instances conformant with Spirent's
Ansible implementation for their LabServer + TestCenter products.
These task instances can then be passed to Playbook().add_task()

Ansible Module Documentation
----------------------------

    - `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_

Prerequisites
-------------

    1.  To run the playbook generated by StcDrvSave(),
        `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_ 
        and its dependencies (e.g. paramiko) must be installed.

ScriptKit Example
-----------------

    - `unit_test/spirent/unit_test_stc_drv_save.py <https://github.com/allenrobel/ask/blob/main/unit_test/spirent/unit_test_stc_drv_save.py>`_

Properties
----------

====================================    ==================================================
Property                                Description
====================================    ==================================================
filename                                path + filename into which to save the DRV results::

                                            - Type: str()
                                            - Examples:
                                                - task.filename = '/tmp/rx_results.json'

register                                Ansible register from which to retrieve the DRV results::

                                            - Type: str()
                                            - Examples:
                                                - task.register = 'RxResults'

====================================    ==================================================

'''
class StcDrvSave(Task):
    def __init__(self, log):
        ansible_module = 'local_action'
        super().__init__(ansible_module, log)
        self.lib_version = our_version
        self.class_name = __class__.__name__

        self.properties_set = set()
        self.properties_set.add('filename')
        self.properties_set.add('register')

        self.init_properties()

    def init_properties(self):
        self.properties = dict()
        for p in self.properties_set:
            self.properties[p] = None

    def final_verification(self):
        for p in self.properties_set:
            if self.properties[p] == None:
                self.log.error('exiting. call instance.{} before calling update()'.format(p))
                exit(1)

    def update(self):
        '''
        Call self.final_verification()
        Populate self.ansible_task dict()
        '''
        self.final_verification()

        self.ansible_task = dict()
        self.ansible_task['vars'] = dict()
        self.ansible_task['vars']['ansible_connection'] = 'local'
        self.ansible_task[self.ansible_module] = dict()
        if self.task_name != None:
            self.ansible_task[self.ansible_module]['name'] = self.task_name
        local_action = 'copy content={' + '{ ' + self.register + ' }' + '}' + ' dest="' + self.filename + '"'
        self.ansible_task[self.ansible_module] = local_action

    @property
    def register(self):
        return self.properties['register']
    @register.setter
    def register(self, x):
        parameter = 'register'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    @property
    def filename(self):
        return self.properties['filename']
    @filename.setter
    def filename(self, x):
        parameter = 'filename'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x
