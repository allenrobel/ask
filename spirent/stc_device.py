# StcDevice() - spirent/stc_device.py
our_version = 106
from copy import deepcopy
from ask.common.task import Task
'''
*****************************************************************************
StcDeviceMac() - spirent/stc_device.py
*****************************************************************************

*****************************************************************************
StcDeviceIPv4() - spirent/stc_device.py
*****************************************************************************

*****************************************************************************
StcDeviceIPv6() - spirent/stc_device.py
*****************************************************************************

.. contents::
   :local:
   :depth: 1

ScriptKit Synopsis
------------------
StcDeviceMac(), StcDeviceIPv4(), StcDeviceIPv6() are subclasses of
StcDeviceConfig() and generate Ansible task instances conformant with
Spirent Ansible implementation for their LabServer + TestCenter products.

These task instances can then be passed to Playbook().add_task()

Ansible Module Documentation
----------------------------

    - `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_

Prerequisites
-------------

    1.  To run playbooks generated by StcDeviceMac(), StcDeviceIPv4() and
        StcDeviceIPv6()
        `Spirent stc-ansible <https://github.com/Spirent/stc-ansible>`_ 
        and its dependencies (e.g. paramiko) must be installed.

ScriptKit Example
-----------------

    - `unit_test/spirent/unit_test_stc_device.py <https://github.com/allenrobel/ask/blob/main/unit_test/spirent/unit_test_stc_device.py>`_

Properties
----------

====================================    ==================================================
Property                                Description
====================================    ==================================================
create_count                            ???::

                                            - Type: int()
                                            - Spirent name: CreateCount
                                            - Default: 1

device_count                            Number of emulated devices to create?::

                                            - Type: int()
                                            - Spirent name: DeviceCount
                                            - Default: 1

if_count                                For each protocol header in IfStack, how many
                                        headers of this type to insert.::

                                            - Type: str()
                                            - Spirent name: IfCount
                                            - Default:
                                                -  StcDeviceMac(): '1'
                                                - StcDeviceIPv4(): '1 1'
                                                - StcDeviceIPv6(): '1 1'

device_name                             Name/handle of the emulated device.  This will be 
                                        used when referencing the emulated device in
                                        subsequent tasks e.g. StcDeviceConfig()::

                                            - Type: str()
                                            - Spirent name: name
                                            - Examples:
                                                - task.name = 'my_device_1'

parent_list                             Parent of the emulated device. It is Spirent so
                                        it is inscrutable.  You should be fine without
                                        setting this and letting ScriptKit set it to the
                                        default of ref:/project::

                                            - Type: str()
                                            - Spirent name: ParentList
                                            - Default: ref:/project

port_name                               Port name on which to create the emulated
                                        device.::

                                            - Type: str()
                                            - Spirent name: Port
                                            - Examples:
                                                - task.port_name = 'my_port_1_1'
                                            - Required

                                            The above populates the following required
                                            Spirent parameter:

                                            stc:
                                                properties:
                                                    Port: ref:/port[@Name='my_port_1_1']


====================================    ==================================================

'''
class StcDevice(Task):
    def __init__(self, task_log):
        ansible_module = 'stc'
        super().__init__(ansible_module, task_log)
        self.lib_version = our_version
        self.class_name = __class__.__name__

        self.action = 'perform'

        self.task_properties_set = set()
        self.task_properties_set.add('task_name')

        self.stc_command_properties_set = set()
        self.stc_command_properties_set.add('command')

        self.stc_device_properties_set = set()
        self.stc_device_properties_set.add('create_count')
        self.stc_device_properties_set.add('device_count')
        self.stc_device_properties_set.add('if_count')
        self.stc_device_properties_set.add('device_name')
        self.stc_device_properties_set.add('parent_list')

        # scriptkit_properties can be used by scripts when
        # setting task_name. See Task().append_to_task_name()
        self.scriptkit_properties = set()
        self.scriptkit_properties.update(self.stc_device_properties_set)
        self.scriptkit_properties.update(self.stc_command_properties_set)
        self.scriptkit_properties.add('command')

        # used in self.update() to map between this class's property names
        # and Spirent's property names. This dict() is keyed on the items in
        # self.stc_device_properties_set, and MUST contain all of these items.
        self.property_map = dict()
        self.property_map['create_count']   = 'CreateCount'
        self.property_map['device_count']   = 'DeviceCount'
        self.property_map['if_count']       = 'IfCount'
        self.property_map['device_name']    = 'name'
        self.property_map['parent_list']    = 'ParentList'

        self.init_properties()

    def init_properties(self):
        self.ansible_task = dict()
        self.ansible_task['name'] = None
        #self.ansible_task[self.ansible_module] = dict()
        # self.ansible_task[self.ansible_module]['command'] = 'DeviceCreate'
        # self.ansible_task[self.ansible_module]['properties'] = dict()

        self.properties = dict()
        self.properties['port_name'] = None
        for p in self.stc_command_properties_set:
            self.properties[p] = None
        for p in self.stc_device_properties_set:
            self.properties[p] = None
        for p in self.task_properties_set:
            self.properties[p] = None

    def set_defaults(self):
        if self.command == None:
            self.command = 'DeviceCreate'
        if self.create_count == None:
            self.create_count = 1
        if self.device_count == None:
            self.device_count = 1
        if self.if_count == None:
            self.if_count = self.default_if_count
        if self.parent_list == None:
            self.parent_list = 'ref:/project'

    def final_verification(self):
        self.set_defaults()
        if self.device_name == None:
            self.task_log.error('exiting. call instance.device_name before calling instance.update()')
            exit(1)
        if self.port_name == None:
            self.task_log.error('exiting. call instance.port_name before calling instance.update()')
            exit(1)

    def commit(self):
        self.update()
    def update(self):
        '''
        call final_verification()
        populate ansible_task dict()
        '''
        self.final_verification()
        d = dict()
        d['action'] = self.action
        d['command'] = self.command
        d['properties'] = dict()
        for p in self.stc_device_properties_set:
            if self.properties[p] != None:
                mapped_property = self.property_map[p]
                d['properties'][mapped_property] = self.properties[p]
        d['properties']['IfStack'] = self.if_stack
        d['properties']['Port'] = self.get_port_ref()
        if self.task_name != None:
            self.ansible_task['name'] = self.task_name
        self.ansible_task[self.ansible_module] = deepcopy(d)

    def get_port_ref(self):
        return "ref:/port[@Name='{}']".format(self.port_name)

    @property
    def command(self):
        return self.properties['command']
    @command.setter
    def command(self, x):
        parameter = 'command'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    @property
    def create_count(self):
        return self.properties['create_count']
    @create_count.setter
    def create_count(self, x):
        parameter = 'create_count'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    @property
    def device_count(self):
        return self.properties['device_count']
    @device_count.setter
    def device_count(self, x):
        parameter = 'device_count'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    @property
    def if_count(self):
        return self.properties['if_count']
    @if_count.setter
    def if_count(self, x):
        parameter = 'if_count'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    @property
    def device_name(self):
        return self.properties['device_name']
    @device_name.setter
    def device_name(self, x):
        parameter = 'device_name'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    @property
    def parent_list(self):
        return self.properties['parent_list']
    @parent_list.setter
    def parent_list(self, x):
        parameter = 'parent_list'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

    @property
    def port_name(self):
        return self.properties['port_name']
    @port_name.setter
    def port_name(self, x):
        parameter = 'port_name'
        if self.set_none(x, parameter):
            return
        self.properties[parameter] = x

class StcDeviceMac(StcDevice):
    def __init__(self, task_log):
        super().__init__(task_log)

        self.if_stack = 'EthIIIf'
        self.default_if_count = '1'

class StcDeviceIpv4(StcDevice):
    def __init__(self, task_log):
        super().__init__(task_log)

        self.if_stack = 'Ipv4If EthIIIf'
        self.default_if_count = '1 1'

class StcDeviceIpv6(StcDevice):
    def __init__(self, task_log):
        super().__init__(task_log)

        self.if_stack = 'Ipv6If EthIIIf'
        self.default_if_count = '1 1'
