#!/usr/bin/env python3
# unit_test/spirent/unit_test_stc_port_control.py
our_version = 101
'''
***********************************************
unit_test_stc_port_control.py
***********************************************

Description
-----------
Generates Ansible playbook conformant with Spirent Ansible module: stc

The playbook generated by this script attaches to Spirent ports.

Prerequisites
-------------

    1.  To run the playbook generated by this script,
        Spirent's Ansible libraries, and their prerequisites,
        must be installed.

        https://github.com/Spirent/stc-ansible

    2.  Playbooks created with the following ScriptKit classes
        (or equivilent playbooks) must be run prior to running
        the playbook created with this script.

======================  ====================  ===============================
Class                   File                  Example script
======================  ====================  ===============================
StcSession()            stc_session.py        unit_test_stc_session.py
StcPorts()              stc_ports.py          unit_test_stc_ports.py
======================  ====================  ===============================
'''
from ask.common.playbook import Playbook
from ask.common.log import Log
from ask.spirent.stc_port_control import StcPortControl

ansible_module = 'stc_port_control'
log = Log('unit_test_{}'.format(ansible_module), 'INFO', 'DEBUG')

def playbook():
    pb = Playbook(log)
    pb.profile_spirent()
    pb.file = '/tmp/{}.yaml'.format(ansible_module)
    pb.name = 'unit_test_{}'.format(ansible_module)
    pb.add_host('labserver-2001')
    return pb

def add_task_stc_port_control_default(pb):
    '''
    This will attach to all ports created with StcPorts()
    '''
    task = StcPortControl(log)
    task.command = 'attach'
    task.task_name = 'attach ports default'
    task.update()
    pb.add_task(task)

def add_task_stc_port_control_add_by_standard_name(pb):
    '''
    This will:
        - Revoke ownership on ports created with StcPorts()
          which were created using default ScriptKit-assigned
          names, for example:
            Stc1/1/1
            Stc1/1/5
        - Attach to these ports

    ScriptKit-assigned names are in the following format:

        StcC/M/P where:
           C = chassis number (task.chassis)
           M = module number  (task.module)
           P = port number    (task.port)
    '''
    task = StcPortControl(log)
    task.command = 'attach'
    task.auto_connect = True
    task.revoke_owner = True
    chassis = 1
    module = 1
    for port in [1,5]:
        task.chassis = chassis
        task.module = module
        task.port = port
        task.add_port_by_standard_name()
    task.task_name = 'attach ports by standard name'
    task.update()
    pb.add_task(task)

def add_task_stc_port_control_add_by_custom_name(pb):
    '''
    This will:
        - Revoke ownership on ports created with StcPorts()
          which were created using custom user-assigned
          names:
            MyPort1
            MyPort2
        - Attach to these ports
    '''
    task = StcPortControl(log)
    task.command = 'attach'
    task.auto_connect = True
    task.revoke_owner = True
    ports = list()
    ports.append('MyPort1')
    ports.append('MyPort2')
    for port in ports:
        task.add_port_by_custom_name(port)
    task.task_name = 'attach ports by custom name'
    task.update()
    pb.add_task(task)

pb = playbook()
add_task_stc_port_control_default(pb)
add_task_stc_port_control_add_by_standard_name(pb)
add_task_stc_port_control_add_by_custom_name(pb)
pb.append_playbook()
pb.write_playbook()
log.info('wrote {}'.format(pb.file))
